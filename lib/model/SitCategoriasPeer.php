<?php


/**
 * Skeleton subclass for performing query and update operations on the 'sit_categorias' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Apr 18 16:14:53 2012
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class SitCategoriasPeer extends BaseSitCategoriasPeer {
    
  public static function crear_categoria($idunidadusuario,$categoria){
        
        
        $categoria = str_replace(array("Á","É","Í","Ó","Ú"), array("á","é","í","ó","ú"), $categoria);       
        
        $a=new Criteria();
        $a->add(SitCategoriasUnidadesPeer::ID_UNIDAD,$idunidadusuario);
        $a->addJoin(SitCategoriasPeer::ID_CATEGORIA, SitCategoriasUnidadesPeer::ID_CATEGORIA);
        $a->add(SitCategoriasPeer::DESCRIPCION,  strtolower($categoria));
        $busca_categoria=SitCategoriasPeer::doSelect($a);
        
        if(!isset($busca_categoria[0])){
        
            $a = new SitCategorias;
            $a->setDescripcion(strtolower($categoria));
            if($a->save()){

                $a = new Criteria();
                $a->addDescendingOrderByColumn("id_categoria");
                $idultimacategoria =  SitCategoriasPeer::doSelect($a);

                $a = new SitCategoriasUnidades;
                $a->setIdUnidad($idunidadusuario);
                $a->setIdCategoria($idultimacategoria[0]->getIdCategoria());
                if($a->save()) return "Categoria creada con exito";
                else return false;            
            } else return false;
        } else return false;
        
    }
    public static function eliminar_categoria($idcategoria){
        
        $a = new Criteria();
        $a->add(SitTicketsPeer::ID_CATEGORIA,$idcategoria);
        $ticketcategoria=SitTicketsPeer::doSelect($a);
        if(isset($ticketcategoria[0])) return "No se puede eliminar esta categoria porque se encuentra asociada a uno o varios tickets.";

        $a = new Criteria();
        $a->add(SitSubcategoriasPeer::ID_CATEGORIA,$idcategoria);
        $ticketsubcategoria=SitSubcategoriasPeer::doSelect($a);
        if(isset($ticketsubcategoria[0])) return "No se puede eliminar esta categoria porque tiene asociadas subcategorias.";
   
        
        $a = new criteria();
        $a->add(SitCategoriasUnidadesPeer::ID_CATEGORIA,$idcategoria);
        if(SitCategoriasUnidadesPeer::doDelete($a)){        
            $a = new criteria();
            $a->add(SitCategoriasPeer::ID_CATEGORIA,$idcategoria);
            if(SitCategoriasPeer::doDelete($a))return "Categoria eliminada";
            else return false;
        }else return false;
        
    }
    
    public static function eliminar_subcategoria($idsubcategoria){
        
        $a = new Criteria();
        $a->add(SitTicketsPeer::ID_SUBCATEGORIA,$idsubcategoria);
        $ticketcategoria=SitTicketsPeer::doSelect($a);
        if(isset($ticketcategoria[0])) return "No se puede eliminar esta subcategoria porque se encuentra asociada a uno o varios tickets.";
        
        $a = new criteria();
        $a->add(SitSubcategoriasPeer::ID_SUBCATEGORIA,$idsubcategoria);
        if(SitCategoriasUnidadesPeer::doDelete($a))return "Sub-Categoria eliminada con exito";
        else return false;
    }
    
    public static function editar_categoria($idcategoria,$categoria){
        
        $categoria = str_replace(array("Á","É","Í","Ó","Ú"), array("á","é","í","ó","ú"), $categoria);
        $categoria=strtolower($categoria);
        
        $a=new Criteria();
	$a->add(SitCategoriasPeer::ID_CATEGORIA,$idcategoria);
	$a->add(SitCategoriasPeer::DESCRIPCION,$categoria);
	if(SitCategoriasPeer::doUpdate($a)) return 'Categoria actualizada con exito';
	else return false;
    }
    
} // SitCategoriasPeer
