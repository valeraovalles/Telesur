<?php

/**
 * Base class that represents a row from the 'sf_guard_user_profile' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Wed Oct 24 11:49:52 2012
 *
 * @package    lib.model.om
 */
abstract class BaseSfGuardUserProfile extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SfGuardUserProfilePeer
	 */
	protected static $peer;

	/**
	 * The value for the user_id field.
	 * @var        int
	 */
	protected $user_id;

	/**
	 * The value for the id_dependencia field.
	 * @var        int
	 */
	protected $id_dependencia;

	/**
	 * The value for the id_cargo field.
	 * @var        int
	 */
	protected $id_cargo;

	/**
	 * The value for the nombre1 field.
	 * @var        string
	 */
	protected $nombre1;

	/**
	 * The value for the nombre2 field.
	 * @var        string
	 */
	protected $nombre2;

	/**
	 * The value for the apellido1 field.
	 * @var        string
	 */
	protected $apellido1;

	/**
	 * The value for the apellido2 field.
	 * @var        string
	 */
	protected $apellido2;

	/**
	 * The value for the cedula field.
	 * @var        string
	 */
	protected $cedula;

	/**
	 * The value for the sexo field.
	 * @var        string
	 */
	protected $sexo;

	/**
	 * The value for the nacionalidad field.
	 * @var        string
	 */
	protected $nacionalidad;

	/**
	 * The value for the fecha_nacimiento field.
	 * @var        string
	 */
	protected $fecha_nacimiento;

	/**
	 * The value for the extension field.
	 * Note: this column has a database default value of: 0
	 * @var        int
	 */
	protected $extension;

	/**
	 * The value for the fecha_ingreso field.
	 * @var        string
	 */
	protected $fecha_ingreso;

	/**
	 * The value for the hora_entrada field.
	 * @var        string
	 */
	protected $hora_entrada;

	/**
	 * The value for the hora_salida field.
	 * @var        string
	 */
	protected $hora_salida;

	/**
	 * @var        sfGuardUser
	 */
	protected $asfGuardUser;

	/**
	 * @var        TsurDependencias
	 */
	protected $aTsurDependencias;

	/**
	 * @var        TsurCargos
	 */
	protected $aTsurCargos;

	/**
	 * @var        array BitBitacora[] Collection to store aggregation of BitBitacora objects.
	 */
	protected $collBitBitacoras;

	/**
	 * @var        Criteria The criteria used to select the current contents of collBitBitacoras.
	 */
	private $lastBitBitacoraCriteria = null;

	/**
	 * @var        array CpControldepersonal[] Collection to store aggregation of CpControldepersonal objects.
	 */
	protected $collCpControldepersonals;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCpControldepersonals.
	 */
	private $lastCpControldepersonalCriteria = null;

	/**
	 * @var        array CtConstancias[] Collection to store aggregation of CtConstancias objects.
	 */
	protected $collCtConstanciass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCtConstanciass.
	 */
	private $lastCtConstanciasCriteria = null;

	/**
	 * @var        array EstSolicitudes[] Collection to store aggregation of EstSolicitudes objects.
	 */
	protected $collEstSolicitudess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEstSolicitudess.
	 */
	private $lastEstSolicitudesCriteria = null;

	/**
	 * @var        array LcLicencias[] Collection to store aggregation of LcLicencias objects.
	 */
	protected $collLcLicenciass;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLcLicenciass.
	 */
	private $lastLcLicenciasCriteria = null;

	/**
	 * @var        array SitComentarios[] Collection to store aggregation of SitComentarios objects.
	 */
	protected $collSitComentarioss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSitComentarioss.
	 */
	private $lastSitComentariosCriteria = null;

	/**
	 * @var        array SitTickets[] Collection to store aggregation of SitTickets objects.
	 */
	protected $collSitTicketss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSitTicketss.
	 */
	private $lastSitTicketsCriteria = null;

	/**
	 * @var        array SitTicketsReasignados[] Collection to store aggregation of SitTicketsReasignados objects.
	 */
	protected $collSitTicketsReasignadoss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSitTicketsReasignadoss.
	 */
	private $lastSitTicketsReasignadosCriteria = null;

	/**
	 * @var        array SitTicketsUsuarios[] Collection to store aggregation of SitTicketsUsuarios objects.
	 */
	protected $collSitTicketsUsuarioss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSitTicketsUsuarioss.
	 */
	private $lastSitTicketsUsuariosCriteria = null;

	/**
	 * @var        SitUsuariosUnidades one-to-one related SitUsuariosUnidades object
	 */
	protected $singleSitUsuariosUnidades;

	/**
	 * @var        array TraAsignaciones[] Collection to store aggregation of TraAsignaciones objects.
	 */
	protected $collTraAsignacioness;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTraAsignacioness.
	 */
	private $lastTraAsignacionesCriteria = null;

	/**
	 * @var        array TraSolicitudes[] Collection to store aggregation of TraSolicitudes objects.
	 */
	protected $collTraSolicitudess;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTraSolicitudess.
	 */
	private $lastTraSolicitudesCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SfGuardUserProfilePeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->extension = 0;
	}

	/**
	 * Initializes internal state of BaseSfGuardUserProfile object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [user_id] column value.
	 * 
	 * @return     int
	 */
	public function getUserId()
	{
		return $this->user_id;
	}

	/**
	 * Get the [id_dependencia] column value.
	 * 
	 * @return     int
	 */
	public function getIdDependencia()
	{
		return $this->id_dependencia;
	}

	/**
	 * Get the [id_cargo] column value.
	 * 
	 * @return     int
	 */
	public function getIdCargo()
	{
		return $this->id_cargo;
	}

	/**
	 * Get the [nombre1] column value.
	 * 
	 * @return     string
	 */
	public function getNombre1()
	{
		return $this->nombre1;
	}

	/**
	 * Get the [nombre2] column value.
	 * 
	 * @return     string
	 */
	public function getNombre2()
	{
		return $this->nombre2;
	}

	/**
	 * Get the [apellido1] column value.
	 * 
	 * @return     string
	 */
	public function getApellido1()
	{
		return $this->apellido1;
	}

	/**
	 * Get the [apellido2] column value.
	 * 
	 * @return     string
	 */
	public function getApellido2()
	{
		return $this->apellido2;
	}

	/**
	 * Get the [cedula] column value.
	 * 
	 * @return     string
	 */
	public function getCedula()
	{
		return $this->cedula;
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     string
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Get the [nacionalidad] column value.
	 * 
	 * @return     string
	 */
	public function getNacionalidad()
	{
		return $this->nacionalidad;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_nacimiento] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaNacimiento($format = 'Y-m-d')
	{
		if ($this->fecha_nacimiento === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_nacimiento);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_nacimiento, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [extension] column value.
	 * 
	 * @return     int
	 */
	public function getExtension()
	{
		return $this->extension;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_ingreso] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaIngreso($format = 'Y-m-d')
	{
		if ($this->fecha_ingreso === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_ingreso);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_ingreso, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_entrada] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraEntrada($format = 'H:i:s')
	{
		if ($this->hora_entrada === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_entrada);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_entrada, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_salida] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraSalida($format = 'H:i:s')
	{
		if ($this->hora_salida === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_salida);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_salida, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [user_id] column.
	 * 
	 * @param      int $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setUserId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->user_id !== $v) {
			$this->user_id = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::USER_ID;
		}

		if ($this->asfGuardUser !== null && $this->asfGuardUser->getId() !== $v) {
			$this->asfGuardUser = null;
		}

		return $this;
	} // setUserId()

	/**
	 * Set the value of [id_dependencia] column.
	 * 
	 * @param      int $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setIdDependencia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_dependencia !== $v) {
			$this->id_dependencia = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::ID_DEPENDENCIA;
		}

		if ($this->aTsurDependencias !== null && $this->aTsurDependencias->getIdDependencia() !== $v) {
			$this->aTsurDependencias = null;
		}

		return $this;
	} // setIdDependencia()

	/**
	 * Set the value of [id_cargo] column.
	 * 
	 * @param      int $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setIdCargo($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_cargo !== $v) {
			$this->id_cargo = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::ID_CARGO;
		}

		if ($this->aTsurCargos !== null && $this->aTsurCargos->getIdCargo() !== $v) {
			$this->aTsurCargos = null;
		}

		return $this;
	} // setIdCargo()

	/**
	 * Set the value of [nombre1] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setNombre1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre1 !== $v) {
			$this->nombre1 = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::NOMBRE1;
		}

		return $this;
	} // setNombre1()

	/**
	 * Set the value of [nombre2] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setNombre2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre2 !== $v) {
			$this->nombre2 = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::NOMBRE2;
		}

		return $this;
	} // setNombre2()

	/**
	 * Set the value of [apellido1] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setApellido1($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido1 !== $v) {
			$this->apellido1 = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::APELLIDO1;
		}

		return $this;
	} // setApellido1()

	/**
	 * Set the value of [apellido2] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setApellido2($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido2 !== $v) {
			$this->apellido2 = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::APELLIDO2;
		}

		return $this;
	} // setApellido2()

	/**
	 * Set the value of [cedula] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setCedula($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cedula !== $v) {
			$this->cedula = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::CEDULA;
		}

		return $this;
	} // setCedula()

	/**
	 * Set the value of [sexo] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Set the value of [nacionalidad] column.
	 * 
	 * @param      string $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setNacionalidad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nacionalidad !== $v) {
			$this->nacionalidad = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::NACIONALIDAD;
		}

		return $this;
	} // setNacionalidad()

	/**
	 * Sets the value of [fecha_nacimiento] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setFechaNacimiento($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_nacimiento !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_nacimiento !== null && $tmpDt = new DateTime($this->fecha_nacimiento)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_nacimiento = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SfGuardUserProfilePeer::FECHA_NACIMIENTO;
			}
		} // if either are not null

		return $this;
	} // setFechaNacimiento()

	/**
	 * Set the value of [extension] column.
	 * 
	 * @param      int $v new value
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setExtension($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->extension !== $v || $this->isNew()) {
			$this->extension = $v;
			$this->modifiedColumns[] = SfGuardUserProfilePeer::EXTENSION;
		}

		return $this;
	} // setExtension()

	/**
	 * Sets the value of [fecha_ingreso] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setFechaIngreso($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_ingreso !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_ingreso !== null && $tmpDt = new DateTime($this->fecha_ingreso)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_ingreso = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SfGuardUserProfilePeer::FECHA_INGRESO;
			}
		} // if either are not null

		return $this;
	} // setFechaIngreso()

	/**
	 * Sets the value of [hora_entrada] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setHoraEntrada($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->hora_entrada !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->hora_entrada !== null && $tmpDt = new DateTime($this->hora_entrada)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->hora_entrada = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = SfGuardUserProfilePeer::HORA_ENTRADA;
			}
		} // if either are not null

		return $this;
	} // setHoraEntrada()

	/**
	 * Sets the value of [hora_salida] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 */
	public function setHoraSalida($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->hora_salida !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->hora_salida !== null && $tmpDt = new DateTime($this->hora_salida)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->hora_salida = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = SfGuardUserProfilePeer::HORA_SALIDA;
			}
		} // if either are not null

		return $this;
	} // setHoraSalida()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->extension !== 0) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->user_id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_dependencia = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_cargo = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nombre1 = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nombre2 = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->apellido1 = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->apellido2 = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->cedula = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->sexo = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->nacionalidad = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->fecha_nacimiento = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->extension = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->fecha_ingreso = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->hora_entrada = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->hora_salida = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 15; // 15 = SfGuardUserProfilePeer::NUM_COLUMNS - SfGuardUserProfilePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SfGuardUserProfile object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->asfGuardUser !== null && $this->user_id !== $this->asfGuardUser->getId()) {
			$this->asfGuardUser = null;
		}
		if ($this->aTsurDependencias !== null && $this->id_dependencia !== $this->aTsurDependencias->getIdDependencia()) {
			$this->aTsurDependencias = null;
		}
		if ($this->aTsurCargos !== null && $this->id_cargo !== $this->aTsurCargos->getIdCargo()) {
			$this->aTsurCargos = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SfGuardUserProfilePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->asfGuardUser = null;
			$this->aTsurDependencias = null;
			$this->aTsurCargos = null;
			$this->collBitBitacoras = null;
			$this->lastBitBitacoraCriteria = null;

			$this->collCpControldepersonals = null;
			$this->lastCpControldepersonalCriteria = null;

			$this->collCtConstanciass = null;
			$this->lastCtConstanciasCriteria = null;

			$this->collEstSolicitudess = null;
			$this->lastEstSolicitudesCriteria = null;

			$this->collLcLicenciass = null;
			$this->lastLcLicenciasCriteria = null;

			$this->collSitComentarioss = null;
			$this->lastSitComentariosCriteria = null;

			$this->collSitTicketss = null;
			$this->lastSitTicketsCriteria = null;

			$this->collSitTicketsReasignadoss = null;
			$this->lastSitTicketsReasignadosCriteria = null;

			$this->collSitTicketsUsuarioss = null;
			$this->lastSitTicketsUsuariosCriteria = null;

			$this->singleSitUsuariosUnidades = null;

			$this->collTraAsignacioness = null;
			$this->lastTraAsignacionesCriteria = null;

			$this->collTraSolicitudess = null;
			$this->lastTraSolicitudesCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSfGuardUserProfile:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SfGuardUserProfilePeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSfGuardUserProfile:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SfGuardUserProfilePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSfGuardUserProfile:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSfGuardUserProfile:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SfGuardUserProfilePeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->asfGuardUser !== null) {
				if ($this->asfGuardUser->isModified() || $this->asfGuardUser->isNew()) {
					$affectedRows += $this->asfGuardUser->save($con);
				}
				$this->setsfGuardUser($this->asfGuardUser);
			}

			if ($this->aTsurDependencias !== null) {
				if ($this->aTsurDependencias->isModified() || $this->aTsurDependencias->isNew()) {
					$affectedRows += $this->aTsurDependencias->save($con);
				}
				$this->setTsurDependencias($this->aTsurDependencias);
			}

			if ($this->aTsurCargos !== null) {
				if ($this->aTsurCargos->isModified() || $this->aTsurCargos->isNew()) {
					$affectedRows += $this->aTsurCargos->save($con);
				}
				$this->setTsurCargos($this->aTsurCargos);
			}


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SfGuardUserProfilePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += SfGuardUserProfilePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collBitBitacoras !== null) {
				foreach ($this->collBitBitacoras as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCpControldepersonals !== null) {
				foreach ($this->collCpControldepersonals as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCtConstanciass !== null) {
				foreach ($this->collCtConstanciass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEstSolicitudess !== null) {
				foreach ($this->collEstSolicitudess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLcLicenciass !== null) {
				foreach ($this->collLcLicenciass as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSitComentarioss !== null) {
				foreach ($this->collSitComentarioss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSitTicketss !== null) {
				foreach ($this->collSitTicketss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSitTicketsReasignadoss !== null) {
				foreach ($this->collSitTicketsReasignadoss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSitTicketsUsuarioss !== null) {
				foreach ($this->collSitTicketsUsuarioss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleSitUsuariosUnidades !== null) {
				if (!$this->singleSitUsuariosUnidades->isDeleted()) {
						$affectedRows += $this->singleSitUsuariosUnidades->save($con);
				}
			}

			if ($this->collTraAsignacioness !== null) {
				foreach ($this->collTraAsignacioness as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTraSolicitudess !== null) {
				foreach ($this->collTraSolicitudess as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->asfGuardUser !== null) {
				if (!$this->asfGuardUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->asfGuardUser->getValidationFailures());
				}
			}

			if ($this->aTsurDependencias !== null) {
				if (!$this->aTsurDependencias->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTsurDependencias->getValidationFailures());
				}
			}

			if ($this->aTsurCargos !== null) {
				if (!$this->aTsurCargos->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTsurCargos->getValidationFailures());
				}
			}


			if (($retval = SfGuardUserProfilePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collBitBitacoras !== null) {
					foreach ($this->collBitBitacoras as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCpControldepersonals !== null) {
					foreach ($this->collCpControldepersonals as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCtConstanciass !== null) {
					foreach ($this->collCtConstanciass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEstSolicitudess !== null) {
					foreach ($this->collEstSolicitudess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLcLicenciass !== null) {
					foreach ($this->collLcLicenciass as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSitComentarioss !== null) {
					foreach ($this->collSitComentarioss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSitTicketss !== null) {
					foreach ($this->collSitTicketss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSitTicketsReasignadoss !== null) {
					foreach ($this->collSitTicketsReasignadoss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSitTicketsUsuarioss !== null) {
					foreach ($this->collSitTicketsUsuarioss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleSitUsuariosUnidades !== null) {
					if (!$this->singleSitUsuariosUnidades->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleSitUsuariosUnidades->getValidationFailures());
					}
				}

				if ($this->collTraAsignacioness !== null) {
					foreach ($this->collTraAsignacioness as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTraSolicitudess !== null) {
					foreach ($this->collTraSolicitudess as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SfGuardUserProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getUserId();
				break;
			case 1:
				return $this->getIdDependencia();
				break;
			case 2:
				return $this->getIdCargo();
				break;
			case 3:
				return $this->getNombre1();
				break;
			case 4:
				return $this->getNombre2();
				break;
			case 5:
				return $this->getApellido1();
				break;
			case 6:
				return $this->getApellido2();
				break;
			case 7:
				return $this->getCedula();
				break;
			case 8:
				return $this->getSexo();
				break;
			case 9:
				return $this->getNacionalidad();
				break;
			case 10:
				return $this->getFechaNacimiento();
				break;
			case 11:
				return $this->getExtension();
				break;
			case 12:
				return $this->getFechaIngreso();
				break;
			case 13:
				return $this->getHoraEntrada();
				break;
			case 14:
				return $this->getHoraSalida();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SfGuardUserProfilePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getUserId(),
			$keys[1] => $this->getIdDependencia(),
			$keys[2] => $this->getIdCargo(),
			$keys[3] => $this->getNombre1(),
			$keys[4] => $this->getNombre2(),
			$keys[5] => $this->getApellido1(),
			$keys[6] => $this->getApellido2(),
			$keys[7] => $this->getCedula(),
			$keys[8] => $this->getSexo(),
			$keys[9] => $this->getNacionalidad(),
			$keys[10] => $this->getFechaNacimiento(),
			$keys[11] => $this->getExtension(),
			$keys[12] => $this->getFechaIngreso(),
			$keys[13] => $this->getHoraEntrada(),
			$keys[14] => $this->getHoraSalida(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SfGuardUserProfilePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setUserId($value);
				break;
			case 1:
				$this->setIdDependencia($value);
				break;
			case 2:
				$this->setIdCargo($value);
				break;
			case 3:
				$this->setNombre1($value);
				break;
			case 4:
				$this->setNombre2($value);
				break;
			case 5:
				$this->setApellido1($value);
				break;
			case 6:
				$this->setApellido2($value);
				break;
			case 7:
				$this->setCedula($value);
				break;
			case 8:
				$this->setSexo($value);
				break;
			case 9:
				$this->setNacionalidad($value);
				break;
			case 10:
				$this->setFechaNacimiento($value);
				break;
			case 11:
				$this->setExtension($value);
				break;
			case 12:
				$this->setFechaIngreso($value);
				break;
			case 13:
				$this->setHoraEntrada($value);
				break;
			case 14:
				$this->setHoraSalida($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SfGuardUserProfilePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setUserId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdDependencia($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdCargo($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNombre1($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNombre2($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setApellido1($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setApellido2($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCedula($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSexo($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setNacionalidad($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setFechaNacimiento($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setExtension($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFechaIngreso($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setHoraEntrada($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setHoraSalida($arr[$keys[14]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);

		if ($this->isColumnModified(SfGuardUserProfilePeer::USER_ID)) $criteria->add(SfGuardUserProfilePeer::USER_ID, $this->user_id);
		if ($this->isColumnModified(SfGuardUserProfilePeer::ID_DEPENDENCIA)) $criteria->add(SfGuardUserProfilePeer::ID_DEPENDENCIA, $this->id_dependencia);
		if ($this->isColumnModified(SfGuardUserProfilePeer::ID_CARGO)) $criteria->add(SfGuardUserProfilePeer::ID_CARGO, $this->id_cargo);
		if ($this->isColumnModified(SfGuardUserProfilePeer::NOMBRE1)) $criteria->add(SfGuardUserProfilePeer::NOMBRE1, $this->nombre1);
		if ($this->isColumnModified(SfGuardUserProfilePeer::NOMBRE2)) $criteria->add(SfGuardUserProfilePeer::NOMBRE2, $this->nombre2);
		if ($this->isColumnModified(SfGuardUserProfilePeer::APELLIDO1)) $criteria->add(SfGuardUserProfilePeer::APELLIDO1, $this->apellido1);
		if ($this->isColumnModified(SfGuardUserProfilePeer::APELLIDO2)) $criteria->add(SfGuardUserProfilePeer::APELLIDO2, $this->apellido2);
		if ($this->isColumnModified(SfGuardUserProfilePeer::CEDULA)) $criteria->add(SfGuardUserProfilePeer::CEDULA, $this->cedula);
		if ($this->isColumnModified(SfGuardUserProfilePeer::SEXO)) $criteria->add(SfGuardUserProfilePeer::SEXO, $this->sexo);
		if ($this->isColumnModified(SfGuardUserProfilePeer::NACIONALIDAD)) $criteria->add(SfGuardUserProfilePeer::NACIONALIDAD, $this->nacionalidad);
		if ($this->isColumnModified(SfGuardUserProfilePeer::FECHA_NACIMIENTO)) $criteria->add(SfGuardUserProfilePeer::FECHA_NACIMIENTO, $this->fecha_nacimiento);
		if ($this->isColumnModified(SfGuardUserProfilePeer::EXTENSION)) $criteria->add(SfGuardUserProfilePeer::EXTENSION, $this->extension);
		if ($this->isColumnModified(SfGuardUserProfilePeer::FECHA_INGRESO)) $criteria->add(SfGuardUserProfilePeer::FECHA_INGRESO, $this->fecha_ingreso);
		if ($this->isColumnModified(SfGuardUserProfilePeer::HORA_ENTRADA)) $criteria->add(SfGuardUserProfilePeer::HORA_ENTRADA, $this->hora_entrada);
		if ($this->isColumnModified(SfGuardUserProfilePeer::HORA_SALIDA)) $criteria->add(SfGuardUserProfilePeer::HORA_SALIDA, $this->hora_salida);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);

		$criteria->add(SfGuardUserProfilePeer::USER_ID, $this->user_id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getUserId();
	}

	/**
	 * Generic method to set the primary key (user_id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setUserId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SfGuardUserProfile (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setUserId($this->user_id);

		$copyObj->setIdDependencia($this->id_dependencia);

		$copyObj->setIdCargo($this->id_cargo);

		$copyObj->setNombre1($this->nombre1);

		$copyObj->setNombre2($this->nombre2);

		$copyObj->setApellido1($this->apellido1);

		$copyObj->setApellido2($this->apellido2);

		$copyObj->setCedula($this->cedula);

		$copyObj->setSexo($this->sexo);

		$copyObj->setNacionalidad($this->nacionalidad);

		$copyObj->setFechaNacimiento($this->fecha_nacimiento);

		$copyObj->setExtension($this->extension);

		$copyObj->setFechaIngreso($this->fecha_ingreso);

		$copyObj->setHoraEntrada($this->hora_entrada);

		$copyObj->setHoraSalida($this->hora_salida);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getBitBitacoras() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addBitBitacora($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCpControldepersonals() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCpControldepersonal($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCtConstanciass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCtConstancias($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEstSolicitudess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEstSolicitudes($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLcLicenciass() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLcLicencias($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSitComentarioss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSitComentarios($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSitTicketss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSitTickets($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSitTicketsReasignadoss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSitTicketsReasignados($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSitTicketsUsuarioss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSitTicketsUsuarios($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getSitUsuariosUnidades();
			if ($relObj) {
				$copyObj->setSitUsuariosUnidades($relObj->copy($deepCopy));
			}

			foreach ($this->getTraAsignacioness() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTraAsignaciones($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTraSolicitudess() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTraSolicitudes($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SfGuardUserProfile Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SfGuardUserProfilePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SfGuardUserProfilePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a sfGuardUser object.
	 *
	 * @param      sfGuardUser $v
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setsfGuardUser(sfGuardUser $v = null)
	{
		if ($v === null) {
			$this->setUserId(NULL);
		} else {
			$this->setUserId($v->getId());
		}

		$this->asfGuardUser = $v;

		// Add binding for other direction of this 1:1 relationship.
		if ($v !== null) {
			$v->setSfGuardUserProfile($this);
		}

		return $this;
	}


	/**
	 * Get the associated sfGuardUser object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     sfGuardUser The associated sfGuardUser object.
	 * @throws     PropelException
	 */
	public function getsfGuardUser(PropelPDO $con = null)
	{
		if ($this->asfGuardUser === null && ($this->user_id !== null)) {
			$this->asfGuardUser = sfGuardUserPeer::retrieveByPk($this->user_id);
			// Because this foreign key represents a one-to-one relationship, we will create a bi-directional association.
			$this->asfGuardUser->setSfGuardUserProfile($this);
		}
		return $this->asfGuardUser;
	}

	/**
	 * Declares an association between this object and a TsurDependencias object.
	 *
	 * @param      TsurDependencias $v
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTsurDependencias(TsurDependencias $v = null)
	{
		if ($v === null) {
			$this->setIdDependencia(NULL);
		} else {
			$this->setIdDependencia($v->getIdDependencia());
		}

		$this->aTsurDependencias = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TsurDependencias object, it will not be re-added.
		if ($v !== null) {
			$v->addSfGuardUserProfile($this);
		}

		return $this;
	}


	/**
	 * Get the associated TsurDependencias object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TsurDependencias The associated TsurDependencias object.
	 * @throws     PropelException
	 */
	public function getTsurDependencias(PropelPDO $con = null)
	{
		if ($this->aTsurDependencias === null && ($this->id_dependencia !== null)) {
			$this->aTsurDependencias = TsurDependenciasPeer::retrieveByPk($this->id_dependencia);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTsurDependencias->addSfGuardUserProfiles($this);
			 */
		}
		return $this->aTsurDependencias;
	}

	/**
	 * Declares an association between this object and a TsurCargos object.
	 *
	 * @param      TsurCargos $v
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTsurCargos(TsurCargos $v = null)
	{
		if ($v === null) {
			$this->setIdCargo(NULL);
		} else {
			$this->setIdCargo($v->getIdCargo());
		}

		$this->aTsurCargos = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TsurCargos object, it will not be re-added.
		if ($v !== null) {
			$v->addSfGuardUserProfile($this);
		}

		return $this;
	}


	/**
	 * Get the associated TsurCargos object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TsurCargos The associated TsurCargos object.
	 * @throws     PropelException
	 */
	public function getTsurCargos(PropelPDO $con = null)
	{
		if ($this->aTsurCargos === null && ($this->id_cargo !== null)) {
			$this->aTsurCargos = TsurCargosPeer::retrieveByPk($this->id_cargo);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTsurCargos->addSfGuardUserProfiles($this);
			 */
		}
		return $this->aTsurCargos;
	}

	/**
	 * Clears out the collBitBitacoras collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addBitBitacoras()
	 */
	public function clearBitBitacoras()
	{
		$this->collBitBitacoras = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collBitBitacoras collection (array).
	 *
	 * By default this just sets the collBitBitacoras collection to an empty array (like clearcollBitBitacoras());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initBitBitacoras()
	{
		$this->collBitBitacoras = array();
	}

	/**
	 * Gets an array of BitBitacora objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related BitBitacoras from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array BitBitacora[]
	 * @throws     PropelException
	 */
	public function getBitBitacoras($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBitBitacoras === null) {
			if ($this->isNew()) {
			   $this->collBitBitacoras = array();
			} else {

				$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

				BitBitacoraPeer::addSelectColumns($criteria);
				$this->collBitBitacoras = BitBitacoraPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

				BitBitacoraPeer::addSelectColumns($criteria);
				if (!isset($this->lastBitBitacoraCriteria) || !$this->lastBitBitacoraCriteria->equals($criteria)) {
					$this->collBitBitacoras = BitBitacoraPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastBitBitacoraCriteria = $criteria;
		return $this->collBitBitacoras;
	}

	/**
	 * Returns the number of related BitBitacora objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related BitBitacora objects.
	 * @throws     PropelException
	 */
	public function countBitBitacoras(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collBitBitacoras === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

				$count = BitBitacoraPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

				if (!isset($this->lastBitBitacoraCriteria) || !$this->lastBitBitacoraCriteria->equals($criteria)) {
					$count = BitBitacoraPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collBitBitacoras);
				}
			} else {
				$count = count($this->collBitBitacoras);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a BitBitacora object to this object
	 * through the BitBitacora foreign key attribute.
	 *
	 * @param      BitBitacora $l BitBitacora
	 * @return     void
	 * @throws     PropelException
	 */
	public function addBitBitacora(BitBitacora $l)
	{
		if ($this->collBitBitacoras === null) {
			$this->initBitBitacoras();
		}
		if (!in_array($l, $this->collBitBitacoras, true)) { // only add it if the **same** object is not already associated
			array_push($this->collBitBitacoras, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related BitBitacoras from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getBitBitacorasJoinBitSubcategorias($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collBitBitacoras === null) {
			if ($this->isNew()) {
				$this->collBitBitacoras = array();
			} else {

				$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

				$this->collBitBitacoras = BitBitacoraPeer::doSelectJoinBitSubcategorias($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(BitBitacoraPeer::ID_USUARIO, $this->user_id);

			if (!isset($this->lastBitBitacoraCriteria) || !$this->lastBitBitacoraCriteria->equals($criteria)) {
				$this->collBitBitacoras = BitBitacoraPeer::doSelectJoinBitSubcategorias($criteria, $con, $join_behavior);
			}
		}
		$this->lastBitBitacoraCriteria = $criteria;

		return $this->collBitBitacoras;
	}

	/**
	 * Clears out the collCpControldepersonals collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCpControldepersonals()
	 */
	public function clearCpControldepersonals()
	{
		$this->collCpControldepersonals = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCpControldepersonals collection (array).
	 *
	 * By default this just sets the collCpControldepersonals collection to an empty array (like clearcollCpControldepersonals());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCpControldepersonals()
	{
		$this->collCpControldepersonals = array();
	}

	/**
	 * Gets an array of CpControldepersonal objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related CpControldepersonals from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CpControldepersonal[]
	 * @throws     PropelException
	 */
	public function getCpControldepersonals($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCpControldepersonals === null) {
			if ($this->isNew()) {
			   $this->collCpControldepersonals = array();
			} else {

				$criteria->add(CpControldepersonalPeer::ID_USUARIO, $this->user_id);

				CpControldepersonalPeer::addSelectColumns($criteria);
				$this->collCpControldepersonals = CpControldepersonalPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CpControldepersonalPeer::ID_USUARIO, $this->user_id);

				CpControldepersonalPeer::addSelectColumns($criteria);
				if (!isset($this->lastCpControldepersonalCriteria) || !$this->lastCpControldepersonalCriteria->equals($criteria)) {
					$this->collCpControldepersonals = CpControldepersonalPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCpControldepersonalCriteria = $criteria;
		return $this->collCpControldepersonals;
	}

	/**
	 * Returns the number of related CpControldepersonal objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CpControldepersonal objects.
	 * @throws     PropelException
	 */
	public function countCpControldepersonals(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCpControldepersonals === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CpControldepersonalPeer::ID_USUARIO, $this->user_id);

				$count = CpControldepersonalPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CpControldepersonalPeer::ID_USUARIO, $this->user_id);

				if (!isset($this->lastCpControldepersonalCriteria) || !$this->lastCpControldepersonalCriteria->equals($criteria)) {
					$count = CpControldepersonalPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCpControldepersonals);
				}
			} else {
				$count = count($this->collCpControldepersonals);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CpControldepersonal object to this object
	 * through the CpControldepersonal foreign key attribute.
	 *
	 * @param      CpControldepersonal $l CpControldepersonal
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCpControldepersonal(CpControldepersonal $l)
	{
		if ($this->collCpControldepersonals === null) {
			$this->initCpControldepersonals();
		}
		if (!in_array($l, $this->collCpControldepersonals, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCpControldepersonals, $l);
			$l->setSfGuardUserProfile($this);
		}
	}

	/**
	 * Clears out the collCtConstanciass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCtConstanciass()
	 */
	public function clearCtConstanciass()
	{
		$this->collCtConstanciass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCtConstanciass collection (array).
	 *
	 * By default this just sets the collCtConstanciass collection to an empty array (like clearcollCtConstanciass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCtConstanciass()
	{
		$this->collCtConstanciass = array();
	}

	/**
	 * Gets an array of CtConstancias objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related CtConstanciass from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CtConstancias[]
	 * @throws     PropelException
	 */
	public function getCtConstanciass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCtConstanciass === null) {
			if ($this->isNew()) {
			   $this->collCtConstanciass = array();
			} else {

				$criteria->add(CtConstanciasPeer::ID_SOLICITANTE, $this->user_id);

				CtConstanciasPeer::addSelectColumns($criteria);
				$this->collCtConstanciass = CtConstanciasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CtConstanciasPeer::ID_SOLICITANTE, $this->user_id);

				CtConstanciasPeer::addSelectColumns($criteria);
				if (!isset($this->lastCtConstanciasCriteria) || !$this->lastCtConstanciasCriteria->equals($criteria)) {
					$this->collCtConstanciass = CtConstanciasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCtConstanciasCriteria = $criteria;
		return $this->collCtConstanciass;
	}

	/**
	 * Returns the number of related CtConstancias objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CtConstancias objects.
	 * @throws     PropelException
	 */
	public function countCtConstanciass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCtConstanciass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CtConstanciasPeer::ID_SOLICITANTE, $this->user_id);

				$count = CtConstanciasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CtConstanciasPeer::ID_SOLICITANTE, $this->user_id);

				if (!isset($this->lastCtConstanciasCriteria) || !$this->lastCtConstanciasCriteria->equals($criteria)) {
					$count = CtConstanciasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCtConstanciass);
				}
			} else {
				$count = count($this->collCtConstanciass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CtConstancias object to this object
	 * through the CtConstancias foreign key attribute.
	 *
	 * @param      CtConstancias $l CtConstancias
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCtConstancias(CtConstancias $l)
	{
		if ($this->collCtConstanciass === null) {
			$this->initCtConstanciass();
		}
		if (!in_array($l, $this->collCtConstanciass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCtConstanciass, $l);
			$l->setSfGuardUserProfile($this);
		}
	}

	/**
	 * Clears out the collEstSolicitudess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEstSolicitudess()
	 */
	public function clearEstSolicitudess()
	{
		$this->collEstSolicitudess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEstSolicitudess collection (array).
	 *
	 * By default this just sets the collEstSolicitudess collection to an empty array (like clearcollEstSolicitudess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEstSolicitudess()
	{
		$this->collEstSolicitudess = array();
	}

	/**
	 * Gets an array of EstSolicitudes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related EstSolicitudess from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EstSolicitudes[]
	 * @throws     PropelException
	 */
	public function getEstSolicitudess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEstSolicitudess === null) {
			if ($this->isNew()) {
			   $this->collEstSolicitudess = array();
			} else {

				$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				EstSolicitudesPeer::addSelectColumns($criteria);
				$this->collEstSolicitudess = EstSolicitudesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				EstSolicitudesPeer::addSelectColumns($criteria);
				if (!isset($this->lastEstSolicitudesCriteria) || !$this->lastEstSolicitudesCriteria->equals($criteria)) {
					$this->collEstSolicitudess = EstSolicitudesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEstSolicitudesCriteria = $criteria;
		return $this->collEstSolicitudess;
	}

	/**
	 * Returns the number of related EstSolicitudes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EstSolicitudes objects.
	 * @throws     PropelException
	 */
	public function countEstSolicitudess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEstSolicitudess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				$count = EstSolicitudesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				if (!isset($this->lastEstSolicitudesCriteria) || !$this->lastEstSolicitudesCriteria->equals($criteria)) {
					$count = EstSolicitudesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEstSolicitudess);
				}
			} else {
				$count = count($this->collEstSolicitudess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EstSolicitudes object to this object
	 * through the EstSolicitudes foreign key attribute.
	 *
	 * @param      EstSolicitudes $l EstSolicitudes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEstSolicitudes(EstSolicitudes $l)
	{
		if ($this->collEstSolicitudess === null) {
			$this->initEstSolicitudess();
		}
		if (!in_array($l, $this->collEstSolicitudess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEstSolicitudess, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related EstSolicitudess from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getEstSolicitudessJoinEstProductos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEstSolicitudess === null) {
			if ($this->isNew()) {
				$this->collEstSolicitudess = array();
			} else {

				$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				$this->collEstSolicitudess = EstSolicitudesPeer::doSelectJoinEstProductos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EstSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

			if (!isset($this->lastEstSolicitudesCriteria) || !$this->lastEstSolicitudesCriteria->equals($criteria)) {
				$this->collEstSolicitudess = EstSolicitudesPeer::doSelectJoinEstProductos($criteria, $con, $join_behavior);
			}
		}
		$this->lastEstSolicitudesCriteria = $criteria;

		return $this->collEstSolicitudess;
	}

	/**
	 * Clears out the collLcLicenciass collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLcLicenciass()
	 */
	public function clearLcLicenciass()
	{
		$this->collLcLicenciass = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLcLicenciass collection (array).
	 *
	 * By default this just sets the collLcLicenciass collection to an empty array (like clearcollLcLicenciass());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLcLicenciass()
	{
		$this->collLcLicenciass = array();
	}

	/**
	 * Gets an array of LcLicencias objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related LcLicenciass from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array LcLicencias[]
	 * @throws     PropelException
	 */
	public function getLcLicenciass($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLcLicenciass === null) {
			if ($this->isNew()) {
			   $this->collLcLicenciass = array();
			} else {

				$criteria->add(LcLicenciasPeer::ID_RESPONSABLE, $this->user_id);

				LcLicenciasPeer::addSelectColumns($criteria);
				$this->collLcLicenciass = LcLicenciasPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LcLicenciasPeer::ID_RESPONSABLE, $this->user_id);

				LcLicenciasPeer::addSelectColumns($criteria);
				if (!isset($this->lastLcLicenciasCriteria) || !$this->lastLcLicenciasCriteria->equals($criteria)) {
					$this->collLcLicenciass = LcLicenciasPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLcLicenciasCriteria = $criteria;
		return $this->collLcLicenciass;
	}

	/**
	 * Returns the number of related LcLicencias objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LcLicencias objects.
	 * @throws     PropelException
	 */
	public function countLcLicenciass(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLcLicenciass === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LcLicenciasPeer::ID_RESPONSABLE, $this->user_id);

				$count = LcLicenciasPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LcLicenciasPeer::ID_RESPONSABLE, $this->user_id);

				if (!isset($this->lastLcLicenciasCriteria) || !$this->lastLcLicenciasCriteria->equals($criteria)) {
					$count = LcLicenciasPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLcLicenciass);
				}
			} else {
				$count = count($this->collLcLicenciass);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a LcLicencias object to this object
	 * through the LcLicencias foreign key attribute.
	 *
	 * @param      LcLicencias $l LcLicencias
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLcLicencias(LcLicencias $l)
	{
		if ($this->collLcLicenciass === null) {
			$this->initLcLicenciass();
		}
		if (!in_array($l, $this->collLcLicenciass, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLcLicenciass, $l);
			$l->setSfGuardUserProfile($this);
		}
	}

	/**
	 * Clears out the collSitComentarioss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSitComentarioss()
	 */
	public function clearSitComentarioss()
	{
		$this->collSitComentarioss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSitComentarioss collection (array).
	 *
	 * By default this just sets the collSitComentarioss collection to an empty array (like clearcollSitComentarioss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSitComentarioss()
	{
		$this->collSitComentarioss = array();
	}

	/**
	 * Gets an array of SitComentarios objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related SitComentarioss from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SitComentarios[]
	 * @throws     PropelException
	 */
	public function getSitComentarioss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
			   $this->collSitComentarioss = array();
			} else {

				$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

				SitComentariosPeer::addSelectColumns($criteria);
				$this->collSitComentarioss = SitComentariosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

				SitComentariosPeer::addSelectColumns($criteria);
				if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
					$this->collSitComentarioss = SitComentariosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSitComentariosCriteria = $criteria;
		return $this->collSitComentarioss;
	}

	/**
	 * Returns the number of related SitComentarios objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SitComentarios objects.
	 * @throws     PropelException
	 */
	public function countSitComentarioss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

				$count = SitComentariosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

				if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
					$count = SitComentariosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSitComentarioss);
				}
			} else {
				$count = count($this->collSitComentarioss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SitComentarios object to this object
	 * through the SitComentarios foreign key attribute.
	 *
	 * @param      SitComentarios $l SitComentarios
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSitComentarios(SitComentarios $l)
	{
		if ($this->collSitComentarioss === null) {
			$this->initSitComentarioss();
		}
		if (!in_array($l, $this->collSitComentarioss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSitComentarioss, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitComentarioss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitComentariossJoinSitTickets($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
				$this->collSitComentarioss = array();
			} else {

				$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

				$this->collSitComentarioss = SitComentariosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitComentariosPeer::ID_USUARIO, $this->user_id);

			if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
				$this->collSitComentarioss = SitComentariosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitComentariosCriteria = $criteria;

		return $this->collSitComentarioss;
	}

	/**
	 * Clears out the collSitTicketss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSitTicketss()
	 */
	public function clearSitTicketss()
	{
		$this->collSitTicketss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSitTicketss collection (array).
	 *
	 * By default this just sets the collSitTicketss collection to an empty array (like clearcollSitTicketss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSitTicketss()
	{
		$this->collSitTicketss = array();
	}

	/**
	 * Gets an array of SitTickets objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related SitTicketss from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SitTickets[]
	 * @throws     PropelException
	 */
	public function getSitTicketss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketss === null) {
			if ($this->isNew()) {
			   $this->collSitTicketss = array();
			} else {

				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				SitTicketsPeer::addSelectColumns($criteria);
				$this->collSitTicketss = SitTicketsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				SitTicketsPeer::addSelectColumns($criteria);
				if (!isset($this->lastSitTicketsCriteria) || !$this->lastSitTicketsCriteria->equals($criteria)) {
					$this->collSitTicketss = SitTicketsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSitTicketsCriteria = $criteria;
		return $this->collSitTicketss;
	}

	/**
	 * Returns the number of related SitTickets objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SitTickets objects.
	 * @throws     PropelException
	 */
	public function countSitTicketss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSitTicketss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				$count = SitTicketsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				if (!isset($this->lastSitTicketsCriteria) || !$this->lastSitTicketsCriteria->equals($criteria)) {
					$count = SitTicketsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSitTicketss);
				}
			} else {
				$count = count($this->collSitTicketss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SitTickets object to this object
	 * through the SitTickets foreign key attribute.
	 *
	 * @param      SitTickets $l SitTickets
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSitTickets(SitTickets $l)
	{
		if ($this->collSitTicketss === null) {
			$this->initSitTicketss();
		}
		if (!in_array($l, $this->collSitTicketss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSitTicketss, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitTicketss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitTicketssJoinSitUnidades($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketss === null) {
			if ($this->isNew()) {
				$this->collSitTicketss = array();
			} else {

				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitUnidades($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

			if (!isset($this->lastSitTicketsCriteria) || !$this->lastSitTicketsCriteria->equals($criteria)) {
				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitUnidades($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitTicketsCriteria = $criteria;

		return $this->collSitTicketss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitTicketss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitTicketssJoinSitCategorias($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketss === null) {
			if ($this->isNew()) {
				$this->collSitTicketss = array();
			} else {

				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitCategorias($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

			if (!isset($this->lastSitTicketsCriteria) || !$this->lastSitTicketsCriteria->equals($criteria)) {
				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitCategorias($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitTicketsCriteria = $criteria;

		return $this->collSitTicketss;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitTicketss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitTicketssJoinSitSubcategorias($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketss === null) {
			if ($this->isNew()) {
				$this->collSitTicketss = array();
			} else {

				$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitSubcategorias($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->user_id);

			if (!isset($this->lastSitTicketsCriteria) || !$this->lastSitTicketsCriteria->equals($criteria)) {
				$this->collSitTicketss = SitTicketsPeer::doSelectJoinSitSubcategorias($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitTicketsCriteria = $criteria;

		return $this->collSitTicketss;
	}

	/**
	 * Clears out the collSitTicketsReasignadoss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSitTicketsReasignadoss()
	 */
	public function clearSitTicketsReasignadoss()
	{
		$this->collSitTicketsReasignadoss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSitTicketsReasignadoss collection (array).
	 *
	 * By default this just sets the collSitTicketsReasignadoss collection to an empty array (like clearcollSitTicketsReasignadoss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSitTicketsReasignadoss()
	{
		$this->collSitTicketsReasignadoss = array();
	}

	/**
	 * Gets an array of SitTicketsReasignados objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related SitTicketsReasignadoss from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SitTicketsReasignados[]
	 * @throws     PropelException
	 */
	public function getSitTicketsReasignadoss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketsReasignadoss === null) {
			if ($this->isNew()) {
			   $this->collSitTicketsReasignadoss = array();
			} else {

				$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

				SitTicketsReasignadosPeer::addSelectColumns($criteria);
				$this->collSitTicketsReasignadoss = SitTicketsReasignadosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

				SitTicketsReasignadosPeer::addSelectColumns($criteria);
				if (!isset($this->lastSitTicketsReasignadosCriteria) || !$this->lastSitTicketsReasignadosCriteria->equals($criteria)) {
					$this->collSitTicketsReasignadoss = SitTicketsReasignadosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSitTicketsReasignadosCriteria = $criteria;
		return $this->collSitTicketsReasignadoss;
	}

	/**
	 * Returns the number of related SitTicketsReasignados objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SitTicketsReasignados objects.
	 * @throws     PropelException
	 */
	public function countSitTicketsReasignadoss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSitTicketsReasignadoss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

				$count = SitTicketsReasignadosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

				if (!isset($this->lastSitTicketsReasignadosCriteria) || !$this->lastSitTicketsReasignadosCriteria->equals($criteria)) {
					$count = SitTicketsReasignadosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSitTicketsReasignadoss);
				}
			} else {
				$count = count($this->collSitTicketsReasignadoss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SitTicketsReasignados object to this object
	 * through the SitTicketsReasignados foreign key attribute.
	 *
	 * @param      SitTicketsReasignados $l SitTicketsReasignados
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSitTicketsReasignados(SitTicketsReasignados $l)
	{
		if ($this->collSitTicketsReasignadoss === null) {
			$this->initSitTicketsReasignadoss();
		}
		if (!in_array($l, $this->collSitTicketsReasignadoss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSitTicketsReasignadoss, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitTicketsReasignadoss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitTicketsReasignadossJoinSitTickets($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketsReasignadoss === null) {
			if ($this->isNew()) {
				$this->collSitTicketsReasignadoss = array();
			} else {

				$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

				$this->collSitTicketsReasignadoss = SitTicketsReasignadosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitTicketsReasignadosPeer::USER_ID, $this->user_id);

			if (!isset($this->lastSitTicketsReasignadosCriteria) || !$this->lastSitTicketsReasignadosCriteria->equals($criteria)) {
				$this->collSitTicketsReasignadoss = SitTicketsReasignadosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitTicketsReasignadosCriteria = $criteria;

		return $this->collSitTicketsReasignadoss;
	}

	/**
	 * Clears out the collSitTicketsUsuarioss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSitTicketsUsuarioss()
	 */
	public function clearSitTicketsUsuarioss()
	{
		$this->collSitTicketsUsuarioss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSitTicketsUsuarioss collection (array).
	 *
	 * By default this just sets the collSitTicketsUsuarioss collection to an empty array (like clearcollSitTicketsUsuarioss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSitTicketsUsuarioss()
	{
		$this->collSitTicketsUsuarioss = array();
	}

	/**
	 * Gets an array of SitTicketsUsuarios objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related SitTicketsUsuarioss from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SitTicketsUsuarios[]
	 * @throws     PropelException
	 */
	public function getSitTicketsUsuarioss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketsUsuarioss === null) {
			if ($this->isNew()) {
			   $this->collSitTicketsUsuarioss = array();
			} else {

				$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

				SitTicketsUsuariosPeer::addSelectColumns($criteria);
				$this->collSitTicketsUsuarioss = SitTicketsUsuariosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

				SitTicketsUsuariosPeer::addSelectColumns($criteria);
				if (!isset($this->lastSitTicketsUsuariosCriteria) || !$this->lastSitTicketsUsuariosCriteria->equals($criteria)) {
					$this->collSitTicketsUsuarioss = SitTicketsUsuariosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSitTicketsUsuariosCriteria = $criteria;
		return $this->collSitTicketsUsuarioss;
	}

	/**
	 * Returns the number of related SitTicketsUsuarios objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SitTicketsUsuarios objects.
	 * @throws     PropelException
	 */
	public function countSitTicketsUsuarioss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSitTicketsUsuarioss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

				$count = SitTicketsUsuariosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

				if (!isset($this->lastSitTicketsUsuariosCriteria) || !$this->lastSitTicketsUsuariosCriteria->equals($criteria)) {
					$count = SitTicketsUsuariosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSitTicketsUsuarioss);
				}
			} else {
				$count = count($this->collSitTicketsUsuarioss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SitTicketsUsuarios object to this object
	 * through the SitTicketsUsuarios foreign key attribute.
	 *
	 * @param      SitTicketsUsuarios $l SitTicketsUsuarios
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSitTicketsUsuarios(SitTicketsUsuarios $l)
	{
		if ($this->collSitTicketsUsuarioss === null) {
			$this->initSitTicketsUsuarioss();
		}
		if (!in_array($l, $this->collSitTicketsUsuarioss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSitTicketsUsuarioss, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related SitTicketsUsuarioss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getSitTicketsUsuariossJoinSitTickets($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitTicketsUsuarioss === null) {
			if ($this->isNew()) {
				$this->collSitTicketsUsuarioss = array();
			} else {

				$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

				$this->collSitTicketsUsuarioss = SitTicketsUsuariosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitTicketsUsuariosPeer::ID_USUARIO, $this->user_id);

			if (!isset($this->lastSitTicketsUsuariosCriteria) || !$this->lastSitTicketsUsuariosCriteria->equals($criteria)) {
				$this->collSitTicketsUsuarioss = SitTicketsUsuariosPeer::doSelectJoinSitTickets($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitTicketsUsuariosCriteria = $criteria;

		return $this->collSitTicketsUsuarioss;
	}

	/**
	 * Gets a single SitUsuariosUnidades object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     SitUsuariosUnidades
	 * @throws     PropelException
	 */
	public function getSitUsuariosUnidades(PropelPDO $con = null)
	{

		if ($this->singleSitUsuariosUnidades === null && !$this->isNew()) {
			$this->singleSitUsuariosUnidades = SitUsuariosUnidadesPeer::retrieveByPK($this->user_id, $con);
		}

		return $this->singleSitUsuariosUnidades;
	}

	/**
	 * Sets a single SitUsuariosUnidades object as related to this object by a one-to-one relationship.
	 *
	 * @param      SitUsuariosUnidades $l SitUsuariosUnidades
	 * @return     SfGuardUserProfile The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitUsuariosUnidades(SitUsuariosUnidades $v)
	{
		$this->singleSitUsuariosUnidades = $v;

		// Make sure that that the passed-in SitUsuariosUnidades isn't already associated with this object
		if ($v->getSfGuardUserProfile() === null) {
			$v->setSfGuardUserProfile($this);
		}

		return $this;
	}

	/**
	 * Clears out the collTraAsignacioness collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTraAsignacioness()
	 */
	public function clearTraAsignacioness()
	{
		$this->collTraAsignacioness = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTraAsignacioness collection (array).
	 *
	 * By default this just sets the collTraAsignacioness collection to an empty array (like clearcollTraAsignacioness());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTraAsignacioness()
	{
		$this->collTraAsignacioness = array();
	}

	/**
	 * Gets an array of TraAsignaciones objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related TraAsignacioness from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TraAsignaciones[]
	 * @throws     PropelException
	 */
	public function getTraAsignacioness($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTraAsignacioness === null) {
			if ($this->isNew()) {
			   $this->collTraAsignacioness = array();
			} else {

				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				TraAsignacionesPeer::addSelectColumns($criteria);
				$this->collTraAsignacioness = TraAsignacionesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				TraAsignacionesPeer::addSelectColumns($criteria);
				if (!isset($this->lastTraAsignacionesCriteria) || !$this->lastTraAsignacionesCriteria->equals($criteria)) {
					$this->collTraAsignacioness = TraAsignacionesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTraAsignacionesCriteria = $criteria;
		return $this->collTraAsignacioness;
	}

	/**
	 * Returns the number of related TraAsignaciones objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TraAsignaciones objects.
	 * @throws     PropelException
	 */
	public function countTraAsignacioness(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTraAsignacioness === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				$count = TraAsignacionesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				if (!isset($this->lastTraAsignacionesCriteria) || !$this->lastTraAsignacionesCriteria->equals($criteria)) {
					$count = TraAsignacionesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTraAsignacioness);
				}
			} else {
				$count = count($this->collTraAsignacioness);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TraAsignaciones object to this object
	 * through the TraAsignaciones foreign key attribute.
	 *
	 * @param      TraAsignaciones $l TraAsignaciones
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTraAsignaciones(TraAsignaciones $l)
	{
		if ($this->collTraAsignacioness === null) {
			$this->initTraAsignacioness();
		}
		if (!in_array($l, $this->collTraAsignacioness, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTraAsignacioness, $l);
			$l->setSfGuardUserProfile($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related TraAsignacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getTraAsignacionessJoinTraSolicitudes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTraAsignacioness === null) {
			if ($this->isNew()) {
				$this->collTraAsignacioness = array();
			} else {

				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				$this->collTraAsignacioness = TraAsignacionesPeer::doSelectJoinTraSolicitudes($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

			if (!isset($this->lastTraAsignacionesCriteria) || !$this->lastTraAsignacionesCriteria->equals($criteria)) {
				$this->collTraAsignacioness = TraAsignacionesPeer::doSelectJoinTraSolicitudes($criteria, $con, $join_behavior);
			}
		}
		$this->lastTraAsignacionesCriteria = $criteria;

		return $this->collTraAsignacioness;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile is new, it will return
	 * an empty collection; or if this SfGuardUserProfile has previously
	 * been saved, it will retrieve related TraAsignacioness from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SfGuardUserProfile.
	 */
	public function getTraAsignacionessJoinTraVehiculos($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTraAsignacioness === null) {
			if ($this->isNew()) {
				$this->collTraAsignacioness = array();
			} else {

				$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

				$this->collTraAsignacioness = TraAsignacionesPeer::doSelectJoinTraVehiculos($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TraAsignacionesPeer::ID_CONDUCTOR, $this->user_id);

			if (!isset($this->lastTraAsignacionesCriteria) || !$this->lastTraAsignacionesCriteria->equals($criteria)) {
				$this->collTraAsignacioness = TraAsignacionesPeer::doSelectJoinTraVehiculos($criteria, $con, $join_behavior);
			}
		}
		$this->lastTraAsignacionesCriteria = $criteria;

		return $this->collTraAsignacioness;
	}

	/**
	 * Clears out the collTraSolicitudess collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTraSolicitudess()
	 */
	public function clearTraSolicitudess()
	{
		$this->collTraSolicitudess = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTraSolicitudess collection (array).
	 *
	 * By default this just sets the collTraSolicitudess collection to an empty array (like clearcollTraSolicitudess());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTraSolicitudess()
	{
		$this->collTraSolicitudess = array();
	}

	/**
	 * Gets an array of TraSolicitudes objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SfGuardUserProfile has previously been saved, it will retrieve
	 * related TraSolicitudess from storage. If this SfGuardUserProfile is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TraSolicitudes[]
	 * @throws     PropelException
	 */
	public function getTraSolicitudess($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTraSolicitudess === null) {
			if ($this->isNew()) {
			   $this->collTraSolicitudess = array();
			} else {

				$criteria->add(TraSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				TraSolicitudesPeer::addSelectColumns($criteria);
				$this->collTraSolicitudess = TraSolicitudesPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TraSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				TraSolicitudesPeer::addSelectColumns($criteria);
				if (!isset($this->lastTraSolicitudesCriteria) || !$this->lastTraSolicitudesCriteria->equals($criteria)) {
					$this->collTraSolicitudess = TraSolicitudesPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTraSolicitudesCriteria = $criteria;
		return $this->collTraSolicitudess;
	}

	/**
	 * Returns the number of related TraSolicitudes objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TraSolicitudes objects.
	 * @throws     PropelException
	 */
	public function countTraSolicitudess(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SfGuardUserProfilePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTraSolicitudess === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TraSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				$count = TraSolicitudesPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TraSolicitudesPeer::ID_SOLICITANTE, $this->user_id);

				if (!isset($this->lastTraSolicitudesCriteria) || !$this->lastTraSolicitudesCriteria->equals($criteria)) {
					$count = TraSolicitudesPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTraSolicitudess);
				}
			} else {
				$count = count($this->collTraSolicitudess);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TraSolicitudes object to this object
	 * through the TraSolicitudes foreign key attribute.
	 *
	 * @param      TraSolicitudes $l TraSolicitudes
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTraSolicitudes(TraSolicitudes $l)
	{
		if ($this->collTraSolicitudess === null) {
			$this->initTraSolicitudess();
		}
		if (!in_array($l, $this->collTraSolicitudess, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTraSolicitudess, $l);
			$l->setSfGuardUserProfile($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collBitBitacoras) {
				foreach ((array) $this->collBitBitacoras as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCpControldepersonals) {
				foreach ((array) $this->collCpControldepersonals as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCtConstanciass) {
				foreach ((array) $this->collCtConstanciass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEstSolicitudess) {
				foreach ((array) $this->collEstSolicitudess as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLcLicenciass) {
				foreach ((array) $this->collLcLicenciass as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSitComentarioss) {
				foreach ((array) $this->collSitComentarioss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSitTicketss) {
				foreach ((array) $this->collSitTicketss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSitTicketsReasignadoss) {
				foreach ((array) $this->collSitTicketsReasignadoss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSitTicketsUsuarioss) {
				foreach ((array) $this->collSitTicketsUsuarioss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleSitUsuariosUnidades) {
				$this->singleSitUsuariosUnidades->clearAllReferences($deep);
			}
			if ($this->collTraAsignacioness) {
				foreach ((array) $this->collTraAsignacioness as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTraSolicitudess) {
				foreach ((array) $this->collTraSolicitudess as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collBitBitacoras = null;
		$this->collCpControldepersonals = null;
		$this->collCtConstanciass = null;
		$this->collEstSolicitudess = null;
		$this->collLcLicenciass = null;
		$this->collSitComentarioss = null;
		$this->collSitTicketss = null;
		$this->collSitTicketsReasignadoss = null;
		$this->collSitTicketsUsuarioss = null;
		$this->singleSitUsuariosUnidades = null;
		$this->collTraAsignacioness = null;
		$this->collTraSolicitudess = null;
			$this->asfGuardUser = null;
			$this->aTsurDependencias = null;
			$this->aTsurCargos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSfGuardUserProfile:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSfGuardUserProfile::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSfGuardUserProfile
