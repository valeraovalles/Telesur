<?php

/**
 * Base class that represents a row from the 'sit_tickets' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Thu Dec 27 12:53:45 2012
 *
 * @package    lib.model.om
 */
abstract class BaseSitTickets extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        SitTicketsPeer
	 */
	protected static $peer;

	/**
	 * The value for the id_ticket field.
	 * @var        int
	 */
	protected $id_ticket;

	/**
	 * The value for the id_unidad field.
	 * @var        int
	 */
	protected $id_unidad;

	/**
	 * The value for the id_solicitante field.
	 * @var        int
	 */
	protected $id_solicitante;

	/**
	 * The value for the id_categoria field.
	 * @var        int
	 */
	protected $id_categoria;

	/**
	 * The value for the id_subcategoria field.
	 * @var        int
	 */
	protected $id_subcategoria;

	/**
	 * The value for the fecha_solicitud field.
	 * @var        string
	 */
	protected $fecha_solicitud;

	/**
	 * The value for the hora_solicitud field.
	 * @var        string
	 */
	protected $hora_solicitud;

	/**
	 * The value for the fecha_solucion field.
	 * @var        string
	 */
	protected $fecha_solucion;

	/**
	 * The value for the hora_solucion field.
	 * @var        string
	 */
	protected $hora_solucion;

	/**
	 * The value for the solicitud field.
	 * @var        string
	 */
	protected $solicitud;

	/**
	 * The value for the solucion field.
	 * @var        string
	 */
	protected $solucion;

	/**
	 * The value for the reasignado field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $reasignado;

	/**
	 * The value for the estatus field.
	 * @var        string
	 */
	protected $estatus;

	/**
	 * The value for the archivos field.
	 * @var        string
	 */
	protected $archivos;

	/**
	 * @var        SitUnidades
	 */
	protected $aSitUnidades;

	/**
	 * @var        SfGuardUserProfile
	 */
	protected $aSfGuardUserProfile;

	/**
	 * @var        SitCategorias
	 */
	protected $aSitCategorias;

	/**
	 * @var        SitSubcategorias
	 */
	protected $aSitSubcategorias;

	/**
	 * @var        array SitComentarios[] Collection to store aggregation of SitComentarios objects.
	 */
	protected $collSitComentarioss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSitComentarioss.
	 */
	private $lastSitComentariosCriteria = null;

	/**
	 * @var        SitTicketsReasignados one-to-one related SitTicketsReasignados object
	 */
	protected $singleSitTicketsReasignados;

	/**
	 * @var        SitTicketsUsuarios one-to-one related SitTicketsUsuarios object
	 */
	protected $singleSitTicketsUsuarios;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'SitTicketsPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->reasignado = false;
	}

	/**
	 * Initializes internal state of BaseSitTickets object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_ticket] column value.
	 * 
	 * @return     int
	 */
	public function getIdTicket()
	{
		return $this->id_ticket;
	}

	/**
	 * Get the [id_unidad] column value.
	 * 
	 * @return     int
	 */
	public function getIdUnidad()
	{
		return $this->id_unidad;
	}

	/**
	 * Get the [id_solicitante] column value.
	 * 
	 * @return     int
	 */
	public function getIdSolicitante()
	{
		return $this->id_solicitante;
	}

	/**
	 * Get the [id_categoria] column value.
	 * 
	 * @return     int
	 */
	public function getIdCategoria()
	{
		return $this->id_categoria;
	}

	/**
	 * Get the [id_subcategoria] column value.
	 * 
	 * @return     int
	 */
	public function getIdSubcategoria()
	{
		return $this->id_subcategoria;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_solicitud] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaSolicitud($format = 'Y-m-d')
	{
		if ($this->fecha_solicitud === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_solicitud);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_solicitud, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_solicitud] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraSolicitud($format = 'H:i:s')
	{
		if ($this->hora_solicitud === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_solicitud);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_solicitud, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_solucion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaSolucion($format = 'Y-m-d')
	{
		if ($this->fecha_solucion === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_solucion);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_solucion, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_solucion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraSolucion($format = 'H:i:s')
	{
		if ($this->hora_solucion === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_solucion);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_solucion, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [solicitud] column value.
	 * 
	 * @return     string
	 */
	public function getSolicitud()
	{
		return $this->solicitud;
	}

	/**
	 * Get the [solucion] column value.
	 * 
	 * @return     string
	 */
	public function getSolucion()
	{
		return $this->solucion;
	}

	/**
	 * Get the [reasignado] column value.
	 * 
	 * @return     boolean
	 */
	public function getReasignado()
	{
		return $this->reasignado;
	}

	/**
	 * Get the [estatus] column value.
	 * 
	 * @return     string
	 */
	public function getEstatus()
	{
		return $this->estatus;
	}

	/**
	 * Get the [archivos] column value.
	 * 
	 * @return     string
	 */
	public function getArchivos()
	{
		return $this->archivos;
	}

	/**
	 * Set the value of [id_ticket] column.
	 * 
	 * @param      int $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setIdTicket($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_ticket !== $v) {
			$this->id_ticket = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ID_TICKET;
		}

		return $this;
	} // setIdTicket()

	/**
	 * Set the value of [id_unidad] column.
	 * 
	 * @param      int $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setIdUnidad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_unidad !== $v) {
			$this->id_unidad = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ID_UNIDAD;
		}

		if ($this->aSitUnidades !== null && $this->aSitUnidades->getIdUnidad() !== $v) {
			$this->aSitUnidades = null;
		}

		return $this;
	} // setIdUnidad()

	/**
	 * Set the value of [id_solicitante] column.
	 * 
	 * @param      int $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setIdSolicitante($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_solicitante !== $v) {
			$this->id_solicitante = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ID_SOLICITANTE;
		}

		if ($this->aSfGuardUserProfile !== null && $this->aSfGuardUserProfile->getUserId() !== $v) {
			$this->aSfGuardUserProfile = null;
		}

		return $this;
	} // setIdSolicitante()

	/**
	 * Set the value of [id_categoria] column.
	 * 
	 * @param      int $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setIdCategoria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_categoria !== $v) {
			$this->id_categoria = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ID_CATEGORIA;
		}

		if ($this->aSitCategorias !== null && $this->aSitCategorias->getIdCategoria() !== $v) {
			$this->aSitCategorias = null;
		}

		return $this;
	} // setIdCategoria()

	/**
	 * Set the value of [id_subcategoria] column.
	 * 
	 * @param      int $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setIdSubcategoria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_subcategoria !== $v) {
			$this->id_subcategoria = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ID_SUBCATEGORIA;
		}

		if ($this->aSitSubcategorias !== null && $this->aSitSubcategorias->getIdSubcategoria() !== $v) {
			$this->aSitSubcategorias = null;
		}

		return $this;
	} // setIdSubcategoria()

	/**
	 * Sets the value of [fecha_solicitud] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setFechaSolicitud($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_solicitud !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_solicitud !== null && $tmpDt = new DateTime($this->fecha_solicitud)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_solicitud = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SitTicketsPeer::FECHA_SOLICITUD;
			}
		} // if either are not null

		return $this;
	} // setFechaSolicitud()

	/**
	 * Sets the value of [hora_solicitud] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setHoraSolicitud($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->hora_solicitud !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->hora_solicitud !== null && $tmpDt = new DateTime($this->hora_solicitud)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->hora_solicitud = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = SitTicketsPeer::HORA_SOLICITUD;
			}
		} // if either are not null

		return $this;
	} // setHoraSolicitud()

	/**
	 * Sets the value of [fecha_solucion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setFechaSolucion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->fecha_solucion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->fecha_solucion !== null && $tmpDt = new DateTime($this->fecha_solucion)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->fecha_solucion = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = SitTicketsPeer::FECHA_SOLUCION;
			}
		} // if either are not null

		return $this;
	} // setFechaSolucion()

	/**
	 * Sets the value of [hora_solucion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setHoraSolucion($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->hora_solucion !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->hora_solucion !== null && $tmpDt = new DateTime($this->hora_solucion)) ? $tmpDt->format('H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->hora_solucion = ($dt ? $dt->format('H:i:s') : null);
				$this->modifiedColumns[] = SitTicketsPeer::HORA_SOLUCION;
			}
		} // if either are not null

		return $this;
	} // setHoraSolucion()

	/**
	 * Set the value of [solicitud] column.
	 * 
	 * @param      string $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setSolicitud($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->solicitud !== $v) {
			$this->solicitud = $v;
			$this->modifiedColumns[] = SitTicketsPeer::SOLICITUD;
		}

		return $this;
	} // setSolicitud()

	/**
	 * Set the value of [solucion] column.
	 * 
	 * @param      string $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setSolucion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->solucion !== $v) {
			$this->solucion = $v;
			$this->modifiedColumns[] = SitTicketsPeer::SOLUCION;
		}

		return $this;
	} // setSolucion()

	/**
	 * Set the value of [reasignado] column.
	 * 
	 * @param      boolean $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setReasignado($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->reasignado !== $v || $this->isNew()) {
			$this->reasignado = $v;
			$this->modifiedColumns[] = SitTicketsPeer::REASIGNADO;
		}

		return $this;
	} // setReasignado()

	/**
	 * Set the value of [estatus] column.
	 * 
	 * @param      string $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setEstatus($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->estatus !== $v) {
			$this->estatus = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ESTATUS;
		}

		return $this;
	} // setEstatus()

	/**
	 * Set the value of [archivos] column.
	 * 
	 * @param      string $v new value
	 * @return     SitTickets The current object (for fluent API support)
	 */
	public function setArchivos($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->archivos !== $v) {
			$this->archivos = $v;
			$this->modifiedColumns[] = SitTicketsPeer::ARCHIVOS;
		}

		return $this;
	} // setArchivos()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->reasignado !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_ticket = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->id_unidad = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_solicitante = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->id_categoria = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->id_subcategoria = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->fecha_solicitud = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->hora_solicitud = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->fecha_solucion = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->hora_solucion = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->solicitud = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->solucion = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->reasignado = ($row[$startcol + 11] !== null) ? (boolean) $row[$startcol + 11] : null;
			$this->estatus = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->archivos = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 14; // 14 = SitTicketsPeer::NUM_COLUMNS - SitTicketsPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating SitTickets object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aSitUnidades !== null && $this->id_unidad !== $this->aSitUnidades->getIdUnidad()) {
			$this->aSitUnidades = null;
		}
		if ($this->aSfGuardUserProfile !== null && $this->id_solicitante !== $this->aSfGuardUserProfile->getUserId()) {
			$this->aSfGuardUserProfile = null;
		}
		if ($this->aSitCategorias !== null && $this->id_categoria !== $this->aSitCategorias->getIdCategoria()) {
			$this->aSitCategorias = null;
		}
		if ($this->aSitSubcategorias !== null && $this->id_subcategoria !== $this->aSitSubcategorias->getIdSubcategoria()) {
			$this->aSitSubcategorias = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SitTicketsPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = SitTicketsPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aSitUnidades = null;
			$this->aSfGuardUserProfile = null;
			$this->aSitCategorias = null;
			$this->aSitSubcategorias = null;
			$this->collSitComentarioss = null;
			$this->lastSitComentariosCriteria = null;

			$this->singleSitTicketsReasignados = null;

			$this->singleSitTicketsUsuarios = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SitTicketsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSitTickets:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				SitTicketsPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSitTickets:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(SitTicketsPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseSitTickets:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseSitTickets:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				SitTicketsPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSitUnidades !== null) {
				if ($this->aSitUnidades->isModified() || $this->aSitUnidades->isNew()) {
					$affectedRows += $this->aSitUnidades->save($con);
				}
				$this->setSitUnidades($this->aSitUnidades);
			}

			if ($this->aSfGuardUserProfile !== null) {
				if ($this->aSfGuardUserProfile->isModified() || $this->aSfGuardUserProfile->isNew()) {
					$affectedRows += $this->aSfGuardUserProfile->save($con);
				}
				$this->setSfGuardUserProfile($this->aSfGuardUserProfile);
			}

			if ($this->aSitCategorias !== null) {
				if ($this->aSitCategorias->isModified() || $this->aSitCategorias->isNew()) {
					$affectedRows += $this->aSitCategorias->save($con);
				}
				$this->setSitCategorias($this->aSitCategorias);
			}

			if ($this->aSitSubcategorias !== null) {
				if ($this->aSitSubcategorias->isModified() || $this->aSitSubcategorias->isNew()) {
					$affectedRows += $this->aSitSubcategorias->save($con);
				}
				$this->setSitSubcategorias($this->aSitSubcategorias);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = SitTicketsPeer::ID_TICKET;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = SitTicketsPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setIdTicket($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += SitTicketsPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collSitComentarioss !== null) {
				foreach ($this->collSitComentarioss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleSitTicketsReasignados !== null) {
				if (!$this->singleSitTicketsReasignados->isDeleted()) {
						$affectedRows += $this->singleSitTicketsReasignados->save($con);
				}
			}

			if ($this->singleSitTicketsUsuarios !== null) {
				if (!$this->singleSitTicketsUsuarios->isDeleted()) {
						$affectedRows += $this->singleSitTicketsUsuarios->save($con);
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aSitUnidades !== null) {
				if (!$this->aSitUnidades->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSitUnidades->getValidationFailures());
				}
			}

			if ($this->aSfGuardUserProfile !== null) {
				if (!$this->aSfGuardUserProfile->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSfGuardUserProfile->getValidationFailures());
				}
			}

			if ($this->aSitCategorias !== null) {
				if (!$this->aSitCategorias->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSitCategorias->getValidationFailures());
				}
			}

			if ($this->aSitSubcategorias !== null) {
				if (!$this->aSitSubcategorias->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aSitSubcategorias->getValidationFailures());
				}
			}


			if (($retval = SitTicketsPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collSitComentarioss !== null) {
					foreach ($this->collSitComentarioss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleSitTicketsReasignados !== null) {
					if (!$this->singleSitTicketsReasignados->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleSitTicketsReasignados->getValidationFailures());
					}
				}

				if ($this->singleSitTicketsUsuarios !== null) {
					if (!$this->singleSitTicketsUsuarios->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleSitTicketsUsuarios->getValidationFailures());
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SitTicketsPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdTicket();
				break;
			case 1:
				return $this->getIdUnidad();
				break;
			case 2:
				return $this->getIdSolicitante();
				break;
			case 3:
				return $this->getIdCategoria();
				break;
			case 4:
				return $this->getIdSubcategoria();
				break;
			case 5:
				return $this->getFechaSolicitud();
				break;
			case 6:
				return $this->getHoraSolicitud();
				break;
			case 7:
				return $this->getFechaSolucion();
				break;
			case 8:
				return $this->getHoraSolucion();
				break;
			case 9:
				return $this->getSolicitud();
				break;
			case 10:
				return $this->getSolucion();
				break;
			case 11:
				return $this->getReasignado();
				break;
			case 12:
				return $this->getEstatus();
				break;
			case 13:
				return $this->getArchivos();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = SitTicketsPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdTicket(),
			$keys[1] => $this->getIdUnidad(),
			$keys[2] => $this->getIdSolicitante(),
			$keys[3] => $this->getIdCategoria(),
			$keys[4] => $this->getIdSubcategoria(),
			$keys[5] => $this->getFechaSolicitud(),
			$keys[6] => $this->getHoraSolicitud(),
			$keys[7] => $this->getFechaSolucion(),
			$keys[8] => $this->getHoraSolucion(),
			$keys[9] => $this->getSolicitud(),
			$keys[10] => $this->getSolucion(),
			$keys[11] => $this->getReasignado(),
			$keys[12] => $this->getEstatus(),
			$keys[13] => $this->getArchivos(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = SitTicketsPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdTicket($value);
				break;
			case 1:
				$this->setIdUnidad($value);
				break;
			case 2:
				$this->setIdSolicitante($value);
				break;
			case 3:
				$this->setIdCategoria($value);
				break;
			case 4:
				$this->setIdSubcategoria($value);
				break;
			case 5:
				$this->setFechaSolicitud($value);
				break;
			case 6:
				$this->setHoraSolicitud($value);
				break;
			case 7:
				$this->setFechaSolucion($value);
				break;
			case 8:
				$this->setHoraSolucion($value);
				break;
			case 9:
				$this->setSolicitud($value);
				break;
			case 10:
				$this->setSolucion($value);
				break;
			case 11:
				$this->setReasignado($value);
				break;
			case 12:
				$this->setEstatus($value);
				break;
			case 13:
				$this->setArchivos($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = SitTicketsPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdTicket($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdUnidad($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdSolicitante($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setIdCategoria($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIdSubcategoria($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setFechaSolicitud($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setHoraSolicitud($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setFechaSolucion($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setHoraSolucion($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSolicitud($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setSolucion($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setReasignado($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEstatus($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setArchivos($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(SitTicketsPeer::DATABASE_NAME);

		if ($this->isColumnModified(SitTicketsPeer::ID_TICKET)) $criteria->add(SitTicketsPeer::ID_TICKET, $this->id_ticket);
		if ($this->isColumnModified(SitTicketsPeer::ID_UNIDAD)) $criteria->add(SitTicketsPeer::ID_UNIDAD, $this->id_unidad);
		if ($this->isColumnModified(SitTicketsPeer::ID_SOLICITANTE)) $criteria->add(SitTicketsPeer::ID_SOLICITANTE, $this->id_solicitante);
		if ($this->isColumnModified(SitTicketsPeer::ID_CATEGORIA)) $criteria->add(SitTicketsPeer::ID_CATEGORIA, $this->id_categoria);
		if ($this->isColumnModified(SitTicketsPeer::ID_SUBCATEGORIA)) $criteria->add(SitTicketsPeer::ID_SUBCATEGORIA, $this->id_subcategoria);
		if ($this->isColumnModified(SitTicketsPeer::FECHA_SOLICITUD)) $criteria->add(SitTicketsPeer::FECHA_SOLICITUD, $this->fecha_solicitud);
		if ($this->isColumnModified(SitTicketsPeer::HORA_SOLICITUD)) $criteria->add(SitTicketsPeer::HORA_SOLICITUD, $this->hora_solicitud);
		if ($this->isColumnModified(SitTicketsPeer::FECHA_SOLUCION)) $criteria->add(SitTicketsPeer::FECHA_SOLUCION, $this->fecha_solucion);
		if ($this->isColumnModified(SitTicketsPeer::HORA_SOLUCION)) $criteria->add(SitTicketsPeer::HORA_SOLUCION, $this->hora_solucion);
		if ($this->isColumnModified(SitTicketsPeer::SOLICITUD)) $criteria->add(SitTicketsPeer::SOLICITUD, $this->solicitud);
		if ($this->isColumnModified(SitTicketsPeer::SOLUCION)) $criteria->add(SitTicketsPeer::SOLUCION, $this->solucion);
		if ($this->isColumnModified(SitTicketsPeer::REASIGNADO)) $criteria->add(SitTicketsPeer::REASIGNADO, $this->reasignado);
		if ($this->isColumnModified(SitTicketsPeer::ESTATUS)) $criteria->add(SitTicketsPeer::ESTATUS, $this->estatus);
		if ($this->isColumnModified(SitTicketsPeer::ARCHIVOS)) $criteria->add(SitTicketsPeer::ARCHIVOS, $this->archivos);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(SitTicketsPeer::DATABASE_NAME);

		$criteria->add(SitTicketsPeer::ID_TICKET, $this->id_ticket);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdTicket();
	}

	/**
	 * Generic method to set the primary key (id_ticket column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdTicket($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of SitTickets (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setIdUnidad($this->id_unidad);

		$copyObj->setIdSolicitante($this->id_solicitante);

		$copyObj->setIdCategoria($this->id_categoria);

		$copyObj->setIdSubcategoria($this->id_subcategoria);

		$copyObj->setFechaSolicitud($this->fecha_solicitud);

		$copyObj->setHoraSolicitud($this->hora_solicitud);

		$copyObj->setFechaSolucion($this->fecha_solucion);

		$copyObj->setHoraSolucion($this->hora_solucion);

		$copyObj->setSolicitud($this->solicitud);

		$copyObj->setSolucion($this->solucion);

		$copyObj->setReasignado($this->reasignado);

		$copyObj->setEstatus($this->estatus);

		$copyObj->setArchivos($this->archivos);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getSitComentarioss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSitComentarios($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getSitTicketsReasignados();
			if ($relObj) {
				$copyObj->setSitTicketsReasignados($relObj->copy($deepCopy));
			}

			$relObj = $this->getSitTicketsUsuarios();
			if ($relObj) {
				$copyObj->setSitTicketsUsuarios($relObj->copy($deepCopy));
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setIdTicket(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     SitTickets Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     SitTicketsPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new SitTicketsPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a SitUnidades object.
	 *
	 * @param      SitUnidades $v
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitUnidades(SitUnidades $v = null)
	{
		if ($v === null) {
			$this->setIdUnidad(NULL);
		} else {
			$this->setIdUnidad($v->getIdUnidad());
		}

		$this->aSitUnidades = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SitUnidades object, it will not be re-added.
		if ($v !== null) {
			$v->addSitTickets($this);
		}

		return $this;
	}


	/**
	 * Get the associated SitUnidades object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SitUnidades The associated SitUnidades object.
	 * @throws     PropelException
	 */
	public function getSitUnidades(PropelPDO $con = null)
	{
		if ($this->aSitUnidades === null && ($this->id_unidad !== null)) {
			$this->aSitUnidades = SitUnidadesPeer::retrieveByPk($this->id_unidad);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSitUnidades->addSitTicketss($this);
			 */
		}
		return $this->aSitUnidades;
	}

	/**
	 * Declares an association between this object and a SfGuardUserProfile object.
	 *
	 * @param      SfGuardUserProfile $v
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSfGuardUserProfile(SfGuardUserProfile $v = null)
	{
		if ($v === null) {
			$this->setIdSolicitante(NULL);
		} else {
			$this->setIdSolicitante($v->getUserId());
		}

		$this->aSfGuardUserProfile = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SfGuardUserProfile object, it will not be re-added.
		if ($v !== null) {
			$v->addSitTickets($this);
		}

		return $this;
	}


	/**
	 * Get the associated SfGuardUserProfile object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SfGuardUserProfile The associated SfGuardUserProfile object.
	 * @throws     PropelException
	 */
	public function getSfGuardUserProfile(PropelPDO $con = null)
	{
		if ($this->aSfGuardUserProfile === null && ($this->id_solicitante !== null)) {
			$this->aSfGuardUserProfile = SfGuardUserProfilePeer::retrieveByPk($this->id_solicitante);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSfGuardUserProfile->addSitTicketss($this);
			 */
		}
		return $this->aSfGuardUserProfile;
	}

	/**
	 * Declares an association between this object and a SitCategorias object.
	 *
	 * @param      SitCategorias $v
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitCategorias(SitCategorias $v = null)
	{
		if ($v === null) {
			$this->setIdCategoria(NULL);
		} else {
			$this->setIdCategoria($v->getIdCategoria());
		}

		$this->aSitCategorias = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SitCategorias object, it will not be re-added.
		if ($v !== null) {
			$v->addSitTickets($this);
		}

		return $this;
	}


	/**
	 * Get the associated SitCategorias object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SitCategorias The associated SitCategorias object.
	 * @throws     PropelException
	 */
	public function getSitCategorias(PropelPDO $con = null)
	{
		if ($this->aSitCategorias === null && ($this->id_categoria !== null)) {
			$this->aSitCategorias = SitCategoriasPeer::retrieveByPk($this->id_categoria);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSitCategorias->addSitTicketss($this);
			 */
		}
		return $this->aSitCategorias;
	}

	/**
	 * Declares an association between this object and a SitSubcategorias object.
	 *
	 * @param      SitSubcategorias $v
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitSubcategorias(SitSubcategorias $v = null)
	{
		if ($v === null) {
			$this->setIdSubcategoria(NULL);
		} else {
			$this->setIdSubcategoria($v->getIdSubcategoria());
		}

		$this->aSitSubcategorias = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the SitSubcategorias object, it will not be re-added.
		if ($v !== null) {
			$v->addSitTickets($this);
		}

		return $this;
	}


	/**
	 * Get the associated SitSubcategorias object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     SitSubcategorias The associated SitSubcategorias object.
	 * @throws     PropelException
	 */
	public function getSitSubcategorias(PropelPDO $con = null)
	{
		if ($this->aSitSubcategorias === null && ($this->id_subcategoria !== null)) {
			$this->aSitSubcategorias = SitSubcategoriasPeer::retrieveByPk($this->id_subcategoria);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aSitSubcategorias->addSitTicketss($this);
			 */
		}
		return $this->aSitSubcategorias;
	}

	/**
	 * Clears out the collSitComentarioss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSitComentarioss()
	 */
	public function clearSitComentarioss()
	{
		$this->collSitComentarioss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSitComentarioss collection (array).
	 *
	 * By default this just sets the collSitComentarioss collection to an empty array (like clearcollSitComentarioss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSitComentarioss()
	{
		$this->collSitComentarioss = array();
	}

	/**
	 * Gets an array of SitComentarios objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this SitTickets has previously been saved, it will retrieve
	 * related SitComentarioss from storage. If this SitTickets is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SitComentarios[]
	 * @throws     PropelException
	 */
	public function getSitComentarioss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SitTicketsPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
			   $this->collSitComentarioss = array();
			} else {

				$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

				SitComentariosPeer::addSelectColumns($criteria);
				$this->collSitComentarioss = SitComentariosPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

				SitComentariosPeer::addSelectColumns($criteria);
				if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
					$this->collSitComentarioss = SitComentariosPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSitComentariosCriteria = $criteria;
		return $this->collSitComentarioss;
	}

	/**
	 * Returns the number of related SitComentarios objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SitComentarios objects.
	 * @throws     PropelException
	 */
	public function countSitComentarioss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SitTicketsPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

				$count = SitComentariosPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

				if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
					$count = SitComentariosPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSitComentarioss);
				}
			} else {
				$count = count($this->collSitComentarioss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SitComentarios object to this object
	 * through the SitComentarios foreign key attribute.
	 *
	 * @param      SitComentarios $l SitComentarios
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSitComentarios(SitComentarios $l)
	{
		if ($this->collSitComentarioss === null) {
			$this->initSitComentarioss();
		}
		if (!in_array($l, $this->collSitComentarioss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSitComentarioss, $l);
			$l->setSitTickets($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this SitTickets is new, it will return
	 * an empty collection; or if this SitTickets has previously
	 * been saved, it will retrieve related SitComentarioss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in SitTickets.
	 */
	public function getSitComentariossJoinSfGuardUserProfile($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(SitTicketsPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSitComentarioss === null) {
			if ($this->isNew()) {
				$this->collSitComentarioss = array();
			} else {

				$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

				$this->collSitComentarioss = SitComentariosPeer::doSelectJoinSfGuardUserProfile($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SitComentariosPeer::ID_TICKET, $this->id_ticket);

			if (!isset($this->lastSitComentariosCriteria) || !$this->lastSitComentariosCriteria->equals($criteria)) {
				$this->collSitComentarioss = SitComentariosPeer::doSelectJoinSfGuardUserProfile($criteria, $con, $join_behavior);
			}
		}
		$this->lastSitComentariosCriteria = $criteria;

		return $this->collSitComentarioss;
	}

	/**
	 * Gets a single SitTicketsReasignados object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     SitTicketsReasignados
	 * @throws     PropelException
	 */
	public function getSitTicketsReasignados(PropelPDO $con = null)
	{

		if ($this->singleSitTicketsReasignados === null && !$this->isNew()) {
			$this->singleSitTicketsReasignados = SitTicketsReasignadosPeer::retrieveByPK($this->id_ticket, $con);
		}

		return $this->singleSitTicketsReasignados;
	}

	/**
	 * Sets a single SitTicketsReasignados object as related to this object by a one-to-one relationship.
	 *
	 * @param      SitTicketsReasignados $l SitTicketsReasignados
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitTicketsReasignados(SitTicketsReasignados $v)
	{
		$this->singleSitTicketsReasignados = $v;

		// Make sure that that the passed-in SitTicketsReasignados isn't already associated with this object
		if ($v->getSitTickets() === null) {
			$v->setSitTickets($this);
		}

		return $this;
	}

	/**
	 * Gets a single SitTicketsUsuarios object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     SitTicketsUsuarios
	 * @throws     PropelException
	 */
	public function getSitTicketsUsuarios(PropelPDO $con = null)
	{

		if ($this->singleSitTicketsUsuarios === null && !$this->isNew()) {
			$this->singleSitTicketsUsuarios = SitTicketsUsuariosPeer::retrieveByPK($this->id_ticket, $con);
		}

		return $this->singleSitTicketsUsuarios;
	}

	/**
	 * Sets a single SitTicketsUsuarios object as related to this object by a one-to-one relationship.
	 *
	 * @param      SitTicketsUsuarios $l SitTicketsUsuarios
	 * @return     SitTickets The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSitTicketsUsuarios(SitTicketsUsuarios $v)
	{
		$this->singleSitTicketsUsuarios = $v;

		// Make sure that that the passed-in SitTicketsUsuarios isn't already associated with this object
		if ($v->getSitTickets() === null) {
			$v->setSitTickets($this);
		}

		return $this;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collSitComentarioss) {
				foreach ((array) $this->collSitComentarioss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleSitTicketsReasignados) {
				$this->singleSitTicketsReasignados->clearAllReferences($deep);
			}
			if ($this->singleSitTicketsUsuarios) {
				$this->singleSitTicketsUsuarios->clearAllReferences($deep);
			}
		} // if ($deep)

		$this->collSitComentarioss = null;
		$this->singleSitTicketsReasignados = null;
		$this->singleSitTicketsUsuarios = null;
			$this->aSitUnidades = null;
			$this->aSfGuardUserProfile = null;
			$this->aSitCategorias = null;
			$this->aSitSubcategorias = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BaseSitTickets:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BaseSitTickets::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BaseSitTickets
